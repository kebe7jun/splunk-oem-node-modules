'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.resetFocus = resetFocus;
exports.focusOnSelector = focusOnSelector;
exports.setTextValue = setTextValue;
exports.isIE = isIE;
exports.isEdge = isEdge;
exports.isChrome = isChrome;
exports.isFirefox = isFirefox;
exports.isSafari = isSafari;

var _lodash = require('lodash');

/**
 * Ensures unified initial focus behavior across browsers. Inserts a button before the first
 * child of the document body, which is then clicked and subsequently removed from the document.
 * @public
 */
function resetFocus() {
    browser.execute(function () {
        var resetButton = document.createElement('button');
        resetButton.id = 'func-test-focus-reset';
        document.body.insertBefore(resetButton, document.body.firstChild);
    });

    browser.$('#func-test-focus-reset').click();

    browser.execute(function () {
        var resetButton = document.querySelector('#func-test-focus-reset');
        resetButton.parentNode.removeChild(resetButton);
    });
}

/**
 * Places focus on the selector, which is necessary before sending key commands.
 * @param {string} selector - A selector compatible with WebdriverIO and document.querySelector()
 * @public
 */
/* global browser, document */

/**
 * Utilities for writing functional tests with `WebdriverIO`.
 * @file
 */

function focusOnSelector(selector) {
    resetFocus();
    browser.execute(function (sel) {
        document.querySelector(sel).focus();
    }, selector);
}

/**
 * Sets a text or textarea value by clicking on the element and then calling `setValue` on it.
 * @param {string} selector - A selector compatible with WebdriverIO.
 * @param {string} value - The text to enter into text input.
 * @public
 */
function setTextValue(selector, value) {
    browser.click(selector);
    browser.setValue(selector, value);
}

/**
 * If the browser under test is Internet Explorer, this function will return `true`, `false` otherwise.
 * @public
 */
function isIE() {
    return (0, _lodash.get)(browser, 'options.desiredCapabilities.browserName') === 'internet explorer';
}

/**
 * If the browser under test is Edge, this function will return `true`, `false` otherwise.
 * @public
 */
function isEdge() {
    return (0, _lodash.get)(browser, 'options.desiredCapabilities.browserName') === 'MicrosoftEdge';
}

/**
 * If the browser under test is Chrome, this function will return `true`, `false` otherwise.
 * @public
 */
function isChrome() {
    return (0, _lodash.get)(browser, 'options.desiredCapabilities.browserName') === 'chrome';
}

/**
 * If the browser under test is Firefox, this function will return `true`, `false` otherwise.
 * @public
 */
function isFirefox() {
    return (0, _lodash.get)(browser, 'options.desiredCapabilities.browserName') === 'firefox';
}

/**
 * If the browser under test is Safari, this function will return `true`, `false` otherwise.
 * @public
 */
function isSafari() {
    return (0, _lodash.get)(browser, 'options.desiredCapabilities.browserName') === 'safari';
}
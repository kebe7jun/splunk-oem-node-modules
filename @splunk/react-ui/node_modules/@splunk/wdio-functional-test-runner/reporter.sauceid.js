'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');

/**
 * Deprecated, use custom JUnit reporter instead
 */

var SauceIdReporter = function (_EventEmitter) {
    _inherits(SauceIdReporter, _EventEmitter);

    function SauceIdReporter(baseReporter) {
        _classCallCheck(this, SauceIdReporter);

        var _this = _possibleConstructorReturn(this, (SauceIdReporter.__proto__ || Object.getPrototypeOf(SauceIdReporter)).call(this));

        var suiteTitles = {};

        _this.on('suite:end', function (suite) {
            // to match sauce's behavior, capture the parent title
            // this should equal a spec's first describe() title
            if (!suiteTitles[suite.specHash]) {
                suiteTitles[suite.specHash] = suite.parent;
            }
        });

        _this.on('runner:end', function (runner) {
            var sessionId = baseReporter.stats.getRunnerStats(runner).sessionID;
            var jobName = suiteTitles[runner.specHash];
            console.log('SauceOnDemandSessionID=' + sessionId + ' job-name=' + jobName); // eslint-disable-line no-console
        });
        return _this;
    }

    return SauceIdReporter;
}(EventEmitter);

SauceIdReporter.reporterName = 'sauceid';
exports.default = SauceIdReporter;
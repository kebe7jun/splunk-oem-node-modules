'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _crypto = require('crypto');

var _fs = require('fs');

var _path = require('path');

var _s = require('aws-sdk/clients/s3');

var _s2 = _interopRequireDefault(_s);

var _fsReaddirRecursive = require('fs-readdir-recursive');

var _fsReaddirRecursive2 = _interopRequireDefault(_fsReaddirRecursive);

var _intel = require('intel');

var _intel2 = _interopRequireDefault(_intel);

var _lodash = require('lodash');

var _mimeTypes = require('mime-types');

var _fixtureCompilation = require('./fixtureCompilation');

var _runnerUtils = require('./runnerUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var maxConcurrentS3Uploads = 20;
var maxS3Delete = 999;

var S3Service = function () {
    function S3Service(settings, state) {
        _classCallCheck(this, S3Service);

        this.state = state;
        this.settings = settings;

        var s3Settings = { region: settings.region };
        if (settings.accessKeyId && settings.secretAccessKey) {
            _intel2.default.debug('Using AWS credentials override');
            s3Settings.accessKeyId = settings.accessKeyId;
            s3Settings.secretAccessKey = settings.secretAccessKey;
        }
        this.S3 = new _s2.default(s3Settings);

        // config.credentials contains the result of the SDK's credentials resolving process
        if (!this.S3.config.credentials) {
            throw new Error('No AWS credentials available');
        }
    }

    _createClass(S3Service, [{
        key: 'beforeSession',
        value: function beforeSession(config) {
            config.baseUrl = this.state.getValue(['s3', 'deploymentUrl']);
        }
    }, {
        key: 'onPrepare',
        value: function onPrepare() {
            var _this = this;

            _intel2.default.debug('Uploading S3 deployment');

            this.deployedKeys = [];
            var _settings = this.settings,
                from = _settings.from,
                bucket = _settings.bucket,
                region = _settings.region;

            var deploymentId = (0, _crypto.randomBytes)(16).toString('hex');
            var filelist = (0, _lodash.chunk)((0, _fsReaddirRecursive2.default)(from), maxConcurrentS3Uploads);

            var uploadFile = function uploadFile(item) {
                return _this.S3.upload({
                    Bucket: bucket,
                    Key: deploymentId + '/' + item,
                    Body: (0, _fs.createReadStream)((0, _path.join)(from, item)),
                    ACL: 'public-read',
                    ContentType: (0, _mimeTypes.lookup)((0, _path.join)(from, item)) || 'application/octet-stream'
                }).promise().then(function () {
                    _intel2.default.debug('Uploaded file to S3: ' + item);
                    _this.deployedKeys.push(deploymentId + '/' + item);
                }, function (err) {
                    _intel2.default.error('Unable to upload file to S3: ' + item, err);
                });
            };

            return new Promise(function (done) {
                var nextGroup = function nextGroup() {
                    var filegroup = filelist.shift();
                    if (filegroup) {
                        var uploadPromises = filegroup.map(function (singleFile) {
                            return uploadFile(singleFile);
                        });
                        Promise.all(uploadPromises).then(nextGroup);
                    } else {
                        done();
                    }
                };
                nextGroup();
            }).then(function () {
                var deploymentUrl = 'https://s3-' + region + '.amazonaws.com/' + bucket + '/' + deploymentId + '/';
                _this.state.setValue(['s3', 'deploymentUrl'], deploymentUrl);
                _intel2.default.debug('S3 deployment url is: ' + deploymentUrl);
            });
        }
    }, {
        key: 'onComplete',
        value: function onComplete() {
            var _this2 = this;

            _intel2.default.debug('Deleting S3 deployment');

            return Promise.all((0, _lodash.chunk)(this.deployedKeys, maxS3Delete).map(function (keysToDelete) {
                return _this2.S3.deleteObjects({
                    Bucket: _this2.settings.bucket,
                    Delete: { Objects: keysToDelete.map(function (Key) {
                            return { Key: Key };
                        }) }
                }).promise();
            }));
        }
    }]);

    return S3Service;
}();

exports.default = function (config, incomingSettings) {
    var settings = _extends({
        region: 'us-west-1',
        from: (0, _fixtureCompilation.fixtureOutputPath)(config.suiOutputPath)
    }, incomingSettings);

    if (!settings.bucket) {
        throw new Error('S3 settings must include a bucket name');
    }

    config.services = config.services ? (0, _lodash.castArray)(config.services) : [];
    config.services.push(new S3Service(settings, (0, _runnerUtils.getState)(config, 's3')));

    return config;
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* global browser */
/* eslint no-underscore-dangle: ['error', { 'allow': ['__coverage__'] }] */

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _testRunnerUtils = require('@splunk/test-runner-utils');

var _lodash = require('lodash');

var _intel = require('intel');

var _intel2 = _interopRequireDefault(_intel);

var _istanbulLibCoverage = require('istanbul-lib-coverage');

var _istanbulLibCoverage2 = _interopRequireDefault(_istanbulLibCoverage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CoverageService = function () {
    function CoverageService(_ref, _ref2) {
        var suiOutputPath = _ref.suiOutputPath;
        var reports = _ref2.coverage,
            maps = _ref2.coverageMaps;

        _classCallCheck(this, CoverageService);

        this.reporters = reports ? ['text', 'html'] : [];
        this.exportMaps = maps;
        this.tempCoverageMapsPath = _path2.default.join(suiOutputPath, 'coverage_maps');
        this.coverageReportPath = _path2.default.join(process.cwd(), 'coverage_report');
        this.coverageMapsPath = _path2.default.join(this.coverageReportPath, 'coverage_maps_func');

        _fsExtra2.default.ensureDirSync(this.tempCoverageMapsPath);
    }

    _createClass(CoverageService, [{
        key: 'after',
        value: function after() {
            // test file, local execution (node)
            var testMap = _istanbulLibCoverage2.default.createCoverageMap(global.__coverage__);
            // fixture + source files, remote execution (browser)
            var fixtureMap = browser.execute('return window.__coverage__').value;

            // microsoft edge issue?
            (0, _lodash.each)(fixtureMap, function (map) {
                (0, _lodash.each)(['b', 'branchMap', 'f', 'fnMap', 's', 'statementMap'], function (p) {
                    map[p] = (0, _lodash.isNull)(map[p]) ? {} : map[p];
                });
            });

            testMap.merge(fixtureMap);

            var timestamp = process.hrtime();
            var filename = timestamp[0] * 1e9 + timestamp[1] + '.json';
            _fsExtra2.default.writeFile(_path2.default.join(this.tempCoverageMapsPath, filename), JSON.stringify(testMap.toJSON()));
        }
    }, {
        key: 'onComplete',
        value: function onComplete(exitCode) {
            var _this = this;

            if (exitCode !== 0) {
                _intel2.default.info('Non-zero exit code, skipping coverage reports');
                return;
            }

            _intel2.default.debug('Writing coverage reports/maps');

            if (this.reporters.length > 0) {
                var coverageMap = (0, _testRunnerUtils.mergeCoverageMaps)([this.tempCoverageMapsPath]);
                (0, _testRunnerUtils.writeCoverageReports)({
                    outputPath: this.coverageReportPath,
                    reporters: this.reporters,
                    coverageMap: coverageMap
                });
            }

            if (this.exportMaps) {
                _fsExtra2.default.readdirSync(this.tempCoverageMapsPath).forEach(function (mapFile) {
                    _fsExtra2.default.moveSync(_path2.default.join(_this.tempCoverageMapsPath, mapFile), _path2.default.join(_this.coverageMapsPath, mapFile));
                });
                _fsExtra2.default.removeSync(this.tempCoverageMapsPath);
            }
        }
    }]);

    return CoverageService;
}();

exports.default = function (config, settings) {
    config.services = config.services ? (0, _lodash.castArray)(config.services) : [];
    config.services.push(new CoverageService(config, settings));

    return config;
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fixtureOutputPath = fixtureOutputPath;
exports.default = buildFixtureConfig;

var _webpackConfigs = require('@splunk/webpack-configs');

var _webpackConfigs2 = _interopRequireDefault(_webpackConfigs);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _intel = require('intel');

var _intel2 = _interopRequireDefault(_intel);

var _lodash = require('lodash');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

var _runnerUtils = require('./runnerUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fixtureOutputPath(basePath) {
    return _path2.default.join(basePath, 'fixtures');
}

function buildFixtureConfig(settings, specs) {
    var fixtureNames = (0, _lodash.uniq)(specs.map(function (spec) {
        return (0, _runnerUtils.specToFixture)(spec, settings);
    }));
    var fixtures = (0, _lodash.invert)((0, _lodash.keyBy)(fixtureNames, function (fixture) {
        return _path2.default.join(settings.sourcePath, fixture);
    }));

    _intel2.default[settings.filter ? 'info' : 'debug']('Compiling ' + fixtureNames.length + ' fixture files');
    _intel2.default.debug(fixtureNames.sort().join('\n') + '\n');

    var webpackConfig = settings.fixtureWebpackProfile ? // eslint-disable-next-line global-require, import/no-dynamic-require
    require(_path2.default.resolve(settings.fixtureWebpackProfile)) : _webpackConfigs2.default;

    var entry = {};
    var plugins = [];
    var fixtureTemplate = settings.fixtureTemplate ? _path2.default.resolve(settings.fixtureTemplate) : _path2.default.join(__dirname, 'fixtureTemplate.html');

    // if the existing webpack config already uses the common chunk plugin, extract the chunk names; add our own
    // plugin instance otherwise
    var commonChunks = [];
    if (Array.isArray(webpackConfig.plugins)) {
        commonChunks = (0, _lodash.flatten)(webpackConfig.plugins.filter(function (plugin) {
            return plugin.constructor && plugin.constructor.name === 'CommonsChunkPlugin';
        }).map(function (plugin) {
            return plugin.chunkNames;
        }));
    }
    if (commonChunks.length === 0) {
        plugins.push(new _webpack2.default.optimize.CommonsChunkPlugin({ name: 'common', minChunks: 2 }));
        commonChunks.push('common');
    }

    // for each fixture, add an entry point and a matching html webpack plugin
    fixtureNames.forEach(function (fixture) {
        entry[fixture] = _path2.default.join(__dirname, 'react-render-loader.js') + '?' + ('file=' + fixtures[fixture] + '!' + _path2.default.join(__dirname, 'render.tmpl'));

        plugins.push(new _htmlWebpackPlugin2.default({
            template: fixtureTemplate,
            filename: fixture + '.html',
            chunks: commonChunks.concat(fixture)
        }));
    });

    return _webpackMerge2.default.strategy({ entry: 'replace', output: 'replace' })(webpackConfig, {
        output: { path: fixtureOutputPath(settings.outputPath), filename: '[name].js' },
        entry: entry,
        plugins: plugins
    });
}
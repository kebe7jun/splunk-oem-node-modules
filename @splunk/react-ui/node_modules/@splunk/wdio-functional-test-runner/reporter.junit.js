'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _path = require('path');

var _lodash = require('lodash');

var _wdioJunitReporter = require('wdio-junit-reporter');

var _wdioJunitReporter2 = _interopRequireDefault(_wdioJunitReporter);

var _junitReportBuilder = require('junit-report-builder');

var _junitReportBuilder2 = _interopRequireDefault(_junitReportBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// A JUnit reporter that adds a failing test suite record for every empty
// test suite encountered. It can also add SauceOnDemandSessionID statements.
var CustomJUnitReporter = function (_JUnitReporter) {
    _inherits(CustomJUnitReporter, _JUnitReporter);

    function CustomJUnitReporter(baseReporter) {
        var _ref;

        _classCallCheck(this, CustomJUnitReporter);

        for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            others[_key - 1] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = CustomJUnitReporter.__proto__ || Object.getPrototypeOf(CustomJUnitReporter)).call.apply(_ref, [this, baseReporter].concat(others)));

        var _ref2 = _this.options.custom || {},
            sauce = _ref2.sauce,
            failOnEmptySuite = _ref2.failOnEmptySuite;

        _this.suiteTitles = {};

        if (sauce) {
            _this.on('suite:end', function (suite) {
                // to match sauce's behavior, capture the parent title
                // this should equal a spec's first describe() title
                if (!_this.suiteTitles[suite.specHash]) {
                    _this.suiteTitles[suite.specHash] = suite.parent;
                }
            });

            _this.on('runner:end', function (runner) {
                var runnerStats = baseReporter.stats.getRunnerStats(runner);

                // add session id and job name to each test stat, otherwise
                // this information won't be available in getStandardOutput below
                (0, _lodash.each)(runnerStats.specs, function (spec) {
                    (0, _lodash.each)(spec.suites, function (suite) {
                        (0, _lodash.each)(suite.tests, function (test) {
                            test.sauceSessionId = runnerStats.sessionID;
                            test.sauceJobName = _this.suiteTitles[runner.specHash];
                        });
                    });
                });
            });
        }

        if (failOnEmptySuite) {
            _this.prepareXml = _this.prepareXmlAndFailEmpty;
            _this.getStandardOutput = _this.getStandardOutputWithSauceInfo;
        }
        return _this;
    }

    _createClass(CustomJUnitReporter, [{
        key: 'prepareXmlAndFailEmpty',
        value: function prepareXmlAndFailEmpty(runners) {
            var _this2 = this;

            var builder = void 0;
            Object.keys(runners).forEach(function (runnerId) {
                var capabilities = runners[runnerId];
                Object.keys(capabilities.specs).forEach(function (specId) {
                    var spec = capabilities.specs[specId];

                    if (Object.keys(spec.suites).length === 0) {
                        var name = (0, _path.relative)(_this2.options.tmpDir, spec.files[0]);
                        builder = builder || _junitReportBuilder2.default.newBuilder();
                        builder.testSuite().name(name).testCase().name(name).className('functional').error('Empty suite found - error during test setup?');
                    }
                });
            });

            return builder ? builder.build() : _get(CustomJUnitReporter.prototype.__proto__ || Object.getPrototypeOf(CustomJUnitReporter.prototype), 'prepareXml', this).call(this, runners);
        }
    }, {
        key: 'getStandardOutputWithSauceInfo',
        value: function getStandardOutputWithSauceInfo(test) {
            var sauceSessionId = test.sauceSessionId,
                sauceJobName = test.sauceJobName;

            var results = _get(CustomJUnitReporter.prototype.__proto__ || Object.getPrototypeOf(CustomJUnitReporter.prototype), 'getStandardOutput', this).call(this, test);
            return results + '\nSauceOnDemandSessionID=' + sauceSessionId + ' job-name=' + sauceJobName;
        }
    }]);

    return CustomJUnitReporter;
}(_wdioJunitReporter2.default);

CustomJUnitReporter.reporterName = 'junit';
exports.default = CustomJUnitReporter;
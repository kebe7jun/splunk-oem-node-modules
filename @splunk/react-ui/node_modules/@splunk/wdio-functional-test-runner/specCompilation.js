'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.specOutputPath = specOutputPath;
exports.default = buildSpecConfig;

var _webpackConfigs = require('@splunk/webpack-configs');

var _webpackConfigs2 = _interopRequireDefault(_webpackConfigs);

var _intel = require('intel');

var _intel2 = _interopRequireDefault(_intel);

var _lodash = require('lodash');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function specOutputPath(settings) {
    return _path2.default.join(settings.outputPath, 'specs');
}

function buildSpecConfig(settings, specs) {
    _intel2.default[settings.filter ? 'info' : 'debug']('Compiling ' + specs.length + ' spec files');
    _intel2.default.debug(specs.sort().join('\n') + '\n');

    var webpackConfig = settings.specWebpackProfile ? // eslint-disable-next-line global-require, import/no-dynamic-require
    require(_path2.default.resolve(settings.specWebpackProfile)) : _webpackConfigs2.default;

    var config = _webpackMerge2.default.strategy({ entry: 'replace', output: 'replace' })(webpackConfig, {
        target: 'node',
        output: { path: specOutputPath(settings), filename: '[name].js' },
        entry: (0, _lodash.zipObject)(specs.map(function (spec) {
            return spec.slice(0, -_path2.default.extname(spec).length);
        }), specs.map(function (spec) {
            return _path2.default.join(settings.sourcePath, spec);
        }))
    });

    // the CommonsChunkPlugin is incompatible with target 'node'
    if (Array.isArray(config.plugins)) {
        config.plugins = config.plugins.filter(function (plugin) {
            return !(plugin.constructor && plugin.constructor.name === 'CommonsChunkPlugin');
        });
    }

    return config;
}
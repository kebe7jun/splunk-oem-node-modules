'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _lodash = require('lodash');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _intel = require('intel');

var _intel2 = _interopRequireDefault(_intel);

var _fixtureCompilation = require('./fixtureCompilation');

var _fixtureCompilation2 = _interopRequireDefault(_fixtureCompilation);

var _functional = require('./functional.coverage');

var _functional2 = _interopRequireDefault(_functional);

var _runnerSettings = require('./runnerSettings');

var _runnerSettings2 = _interopRequireDefault(_runnerSettings);

var _runnerUtils = require('./runnerUtils');

var _specCompilation = require('./specCompilation');

var _specCompilation2 = _interopRequireDefault(_specCompilation);

var _package = require('./package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* globals browser */

var toJs = function toJs(file) {
    var lastDot = file.lastIndexOf('.');
    return file.substr(0, lastDot) + '.js';
};

exports.default = function (settings) {
    _intel2.default.basicConfig({ level: _intel2.default.INFO, format: '%(message)s' });

    // TODO: better way to do this? script is invoked multiple times
    var initialRun = (0, _lodash.endsWith)(process.argv[1], 'wdio') || (0, _lodash.endsWith)(process.argv[1], 'splunk-wdio-functional-test-runner');
    var fixtureConfig = void 0;

    (0, _runnerSettings2.default)(settings);

    if (initialRun) {
        _intel2.default.debug(_package.name + ' ' + _package.version);
        _fsExtra2.default.emptyDirSync(settings.outputPath);
    }

    var specs = (0, _runnerUtils.getSpecList)(settings);
    if ((0, _lodash.isEmpty)(specs)) {
        throw new Error('No specs found, exiting.');
    }
    var specConfig = initialRun ? (0, _specCompilation2.default)(settings, specs) : null;

    if (settings.fixtureMode && initialRun) {
        fixtureConfig = (0, _fixtureCompilation2.default)(settings, specs);
    }

    var compiledSpecPaths = specs.map(function (spec) {
        return _path2.default.join((0, _specCompilation.specOutputPath)(settings), toJs(spec));
    }).sort();

    var config = {
        coloredLogs: true,
        services: [],

        connectionRetryCount: 3,
        maxInstances: 5,
        waitforTimeout: 10000,

        framework: 'mocha',
        mochaOpts: { retries: 2, ui: 'bdd' },

        reporterOptions: {},
        reporters: (0, _lodash.includes)(process.argv, '--reporters') ? [] : ['spec'],

        specs: compiledSpecPaths,
        suiOutputPath: settings.outputPath,
        screenshotPath: _path2.default.join(settings.outputPath, 'screenshots'), // only for crash-shots

        onPrepare: function onPrepare() {
            var configs = [].concat(fixtureConfig || []).concat(specConfig || []);
            return configs.length > 0 ? (0, _runnerUtils.runWebpackCompilation)(configs) : null;
        }
    };

    if (settings.fixtureMode) {
        config.beforeTest = function (suite) {
            var spec = _path2.default.relative((0, _specCompilation.specOutputPath)(settings), suite.file);
            var fixture = (0, _runnerUtils.specToFixture)(spec, settings);
            var url = fixture + '.html';

            _intel2.default.debug('Navigating to: ' + url + ' (spec: ' + spec + ')');
            browser.url(url);
        };
    }

    return settings.coverage || settings.coverageMaps ? (0, _functional2.default)(config, settings) : config;
};